// Generated by CoffeeScript 1.6.3
var Hamlet, attrMatch, emptyTags, fillAttrs, indexOf, join_attrs, makeMap, parse_attrs,
  __slice = [].slice;

Hamlet = function(str, data){
    var c  = Hamlet.templateSettings;
    str = Hamlet.toHtml(str);
    var tmpl = 'var __p=[],print=function(){__p.push.apply(__p,arguments);};' +
      'with(obj||{}){__p.push(\'' +
      str.replace(/\\/g, '\\\\')
         .replace(/'/g, "\\'")
         .replace(c.interpolate, function(match, code) {
           return "'," + code.replace(/\\'/g, "'") + ",'";
         })
         .replace(/\r/g, '\\r')
         .replace(/\n/g, '\\n')
         .replace(/\t/g, '\\t')
         + "');}return __p.join('');";
    var func = new Function('obj', tmpl);
    return data ? func(data) : func;
  };
;

Hamlet.templateSettings = {
  interpolate: /\{\{([\s\S]+?)\}\}/g
};

Hamlet.toHtml = function(html) {
  var attrs, class_attr, classes, content, delete_comment, id, id_attr, ids, innerHTML, last_tag_indent, line, needs_space, oldp, oldt, pos, push_innerHTML, si, tag_attrs, tag_name, tag_portion, tag_stack, ti, unindented, _i, _len, _ref, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
  content = [];
  tag_stack = [];
  last_tag_indent = 0;
  needs_space = false;
  delete_comment = function(s) {
    var i, sub;
    i = indexOf(s, '#');
    if (i == null) {
      return s;
    } else {
      sub = s.substring(0, i);
      if (indexOf(s, '&#') !== i - 1) {
        return sub;
      } else {
        return sub + '#' + delete_comment(s.substring(i + 1));
      }
    }
  };
  push_innerHTML = function(str) {
    needs_space = true;
    return content.push(delete_comment(str));
  };
  _ref = html.split(/\n\r*/);
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    line = _ref[_i];
    pos = 0;
    while (line[pos] === ' ') {
      pos += 1;
    }
    unindented = line.substring(pos);
    if (unindented.length === 0) {
      content.push(' ');
    } else if (unindented[0] === '#') {

    } else {
      if (pos <= last_tag_indent) {
        if (tag_stack.length > 0 && pos === last_tag_indent) {
          _ref1 = tag_stack.pop(), oldp = _ref1[0], oldt = _ref1[1];
          last_tag_indent = ((_ref2 = tag_stack[tag_stack.length - 1]) != null ? _ref2[0] : void 0) || 0;
          content.push("</" + oldt + ">");
        }
        while (tag_stack.length > 0 && pos < last_tag_indent) {
          needs_space = false;
          _ref3 = tag_stack.pop(), oldp = _ref3[0], oldt = _ref3[1];
          last_tag_indent = ((_ref4 = tag_stack[tag_stack.length - 1]) != null ? _ref4[0] : void 0) || 0;
          content.push("</" + oldt + ">");
        }
        if (tag_stack.length > 0 && pos === last_tag_indent) {
          _ref5 = tag_stack.pop(), oldp = _ref5[0], oldt = _ref5[1];
          last_tag_indent = ((_ref6 = tag_stack[tag_stack.length - 1]) != null ? _ref6[0] : void 0) || 0;
          content.push("</" + oldt + ">");
        }
      }
      if (unindented[0] === '>') {
        unindented = unindented.substring(1);
        needs_space = false;
      }
      if (needs_space) {
        content.push(" ");
      }
      needs_space = false;
      if (unindented[0] !== '<') {
        push_innerHTML(unindented);
      } else {
        last_tag_indent = pos;
        innerHTML = "";
        tag_portion = unindented.substring(1);
        ti = indexOf(unindented, '>');
        if (ti != null) {
          tag_portion = unindented.substring(1, ti);
          if (tag_portion[tag_portion.length] === "/") {
            tag_portion = tag_portion.substring(innerHTML.length - 1);
          }
          innerHTML = unindented.substring(ti + 1);
        }
        tag_attrs = "";
        id_attr = null;
        class_attr = null;
        tag_name = tag_portion;
        si = indexOf(tag_portion, ' ');
        if (si != null) {
          tag_name = tag_portion.substring(0, si);
          tag_attrs = tag_portion.substring(si);
        }
        _ref7 = tag_name.split('#'), tag_name = _ref7[0], ids = 2 <= _ref7.length ? __slice.call(_ref7, 1) : [];
        if (ids.length !== 0) {
          if (ids.length > 1) {
            throw "found multiple ids: " + ids.join(',');
          }
          _ref8 = ids[0].split('.'), id = _ref8[0], classes = 2 <= _ref8.length ? __slice.call(_ref8, 1) : [];
          if (classes.length !== 0) {
            tag_name = tag_name + '.' + classes.join('.');
          }
          id_attr = id;
        }
        _ref9 = tag_name.split('.'), tag_name = _ref9[0], classes = 2 <= _ref9.length ? __slice.call(_ref9, 1) : [];
        if (classes.length !== 0) {
          class_attr = classes;
        }
        if (tag_name === "") {
          tag_name = "div";
        }
        if (emptyTags[tag_name]) {
          content.push("<" + tag_name + "/>");
        } else {
          tag_stack.push([last_tag_indent, tag_name]);
          if (tag_attrs.length === 0 && !id_attr && (class_attr || []).length === 0) {
            content.push("<" + tag_name + ">");
          } else {
            attrs = parse_attrs(tag_attrs, class_attr);
            if (id_attr) {
              attrs.unshift(["id", id_attr]);
            }
            content.push("<" + tag_name + " " + (join_attrs(attrs)) + ">");
          }
          if (innerHTML.length !== 0) {
            push_innerHTML(innerHTML);
          }
        }
      }
    }
    void 0;
  }
  while (tag_stack.length > 0) {
    _ref10 = tag_stack.pop(), oldp = _ref10[0], oldt = _ref10[1];
    content.push("</" + oldt + ">");
  }
  return content.join("");
};

indexOf = function(str, substr) {
  var i;
  i = str.indexOf(substr);
  if (i === -1) {
    return null;
  } else {
    return i;
  }
};

makeMap = function(str) {
  var i, items, obj, _i, _len;
  obj = {};
  items = str.split(",");
  for (_i = 0, _len = items.length; _i < _len; _i++) {
    i = items[_i];
    obj[items[i]] = true;
    void 0;
  }
  return obj;
};

attrMatch = /(?:\.|#)?([-A-Za-z0-9_]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))?/g;

fillAttrs = makeMap("checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected");

emptyTags = makeMap("area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed");

parse_attrs = function(html, classes) {
  var attrs;
  attrs = [];
  classes || (classes = []);
  html.replace(attrMatch, function(match, name) {
    var val, value;
    if (match[0] === ".") {
      classes = classes.concat(name.split('.'));
    } else {
      value = match[0] === "#" ? (val = name, name = "id", val) : arguments[2] || arguments[3] || arguments[4] || (fillAttrs[name] ? name : "");
      if (name === "class") {
        classes.push(value);
      } else {
        attrs.push([name, value.replace(/(^|[^\\])"/g, '$1\\\"')]);
      }
    }
  });
  if (classes.length > 0) {
    attrs.unshift(["class", classes.join(" ")]);
  }
  return attrs;
};

join_attrs = function(attrs) {
  var attr;
  return ((function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = attrs.length; _i < _len; _i++) {
      attr = attrs[_i];
      _results.push(attr[0] + '="' + attr[1] + '"');
    }
    return _results;
  })()).join(' ');
};

if (exports) {
  exports.hamlet = Hamlet;
}
